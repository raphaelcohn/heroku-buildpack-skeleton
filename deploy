#!/usr/bin/env sh
# This file is part of heroku-skeleton-buildpack. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT. No part of heroku-skeleton, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku-skeleton-buildpack. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT.


_program()
{
	core_usesIn heroku
	core_usesIn heroku validate configure
    heroku_deploy()
    {
		heroku_configure_initialise
		heroku_configure_register
		heroku_configure_load
		
		heroku_findBuildPackUrl
		heroku_createAppIfNecessary
		heroku_setEnvironmentVariables
		heroku_deploy
    }
}

# requires the presence of 'readlink'
# could have an env variable (eg _program_path_${_program_name}), but that gets really horrid to code in shell script
_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s' "$_program_fattening_program_path"
	elif [ "${0%/*}" = "$0" ]; then
		# We've been invoked on the PATH or directly by the interpreter (bash progname)
		# This doesn't work reliably if invoked via the PATH
		
		# We could iterate over the PATH, find the first hit, then assume it's /bin => /lib, and go from there...
		
		printf '%s' "$(pwd)"
	else
		# pdksh / mksh have problems with unsetting a variable that was never set...
		unset CDPATH 1>/dev/null 2>/dev/null || true
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			scriptPath=$(realpath "$0")
			cd "${scriptPath%/*}" 1>/dev/null
				pwd
			cd - 1>/dev/null
			unset scriptPath
			return 0
		fi
		
		originalPath="$(pwd)"
		scriptPath="$0"
		parentFolderPath=''
		linkName=''
		
		# We cd out of our directory; we may not be able to cd back into it later. Oh well.
		while [ -L "$scriptPath" ]
		do
			parentFolderPath="${scriptPath%/*}"
			linkName="${scriptPath##*/}"
			
			cd "$parentFolderPath" 1>/dev/null
			scriptPath="$(readlink "$linkName")"
		done
		
		parentFolderPath="${scriptPath%/*}"
		cd "$parentFolderPath" 1>/dev/null
		
		# Output the path
		pwd
		
		cd "$originalPath" 1>/dev/null
		
		# Unset variables; we can't use locals as ksh/yash support not yet init'd
		unset originalPath
		unset scriptPath
		unset parentFolderPath
		unset linkName
	fi
}

_program_name='deploy'
_program_namespace='heroku'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='heroku_deploy'

_program_commandLine_parseInitialise()
{
	heroku_repository_default="$(pwd)"
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]...
"
	_program_commandLine_helpMessage_description="Deploys Heroku apps, optionally creating them"
	_program_commandLine_helpMessage_options="
  -r, --repository PATH  PATH to a Git repository (or a subfolder in it).
                         Defaults to '$heroku_region_default'."
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys="
  heroku_repository      Equivalent to --repository
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -r /path/to/folder/containing/.git
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		r|repository)
			echo 'yes-argumented'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		r|repository)
			heroku_validate_repositoryPathAndSetVariable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			#heroku_repositoryPath is set by the above function
			heroku_repository="$optionValue"
		;;
		
	esac
}

_program_commandLine_validate()
{
	if core_variable_isUnset heroku_repository; then
		heroku_repository="$heroku_repository_default"
		heroku_validate_repositoryPathAndSetVariable $core_commandLine_exitCode_CONFIG 'default' 'heroku_repository_default' "$heroku_repository_default"
		#heroku_repositoryPath is set by the above function
	else
		heroku_validate_repositoryPathAndSetVariable $core_commandLine_exitCode_CONFIG 'configuration setting' 'heroku_repository' "$heroku_repository"
		#heroku_repositoryPath is set by the above function
	fi
}

. "$_program_libPath"/shellfire/core/init.functions "$@"
