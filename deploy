#!/usr/bin/env sh
# This file is part of heroku-skeleton-buildpack. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT. No part of heroku-skeleton, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku-skeleton-buildpack. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT.


_program()
{
	core_usesIn heroku
	core_usesIn heroku validate configure
    heroku_deploy()
    {
		heroku_validate_repositoryPathOnceDependenciesInstalled $core_commandLine_exitCode_CONFIG 'setting' 'heroku_repository' "$heroku_repository"
		
		heroku_configure_initialise
		heroku_configure_register
		heroku_configure_load
		
		heroku_initialise
		heroku_findBuildPackUrl
		heroku_createAppIfNecessary
		
		# Failure results in maintainenance mode being on; not a bad thing, really
		heroku_maintenanceModeEnable
			heroku_setEnvironmentVariables
			heroku_push
		heroku_maintenanceModeDisable
    }
}

_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s\n' "$_program_fattening_program_path"
		
	elif [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi
		
	else
	
		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
		
		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}
		
		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"
				
				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"
				
				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will failure in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"
				
				_program_path_find_parentPath
				pwd -P
			)
		fi
		
	fi
}

_program_name='deploy'
_program_namespace='heroku'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='heroku_deploy'

_program_commandLine_parseInitialise()
{
	heroku_repository_default="$(pwd)"
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]...
"
	_program_commandLine_helpMessage_description="Deploys Heroku apps, optionally creating them"
	_program_commandLine_helpMessage_options="
  -r, --repository PATH  PATH to a Git repository (or a subfolder in it).
                         Defaults to '$heroku_region_default'."
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys="
  heroku_repository      Equivalent to --repository
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -r /path/to/folder/containing/.git
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		r|repository)
			echo 'yes-argumented'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		r|repository)
			heroku_validate_repository $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			heroku_repository="$optionValue"
		;;
		
	esac
}

_program_commandLine_validate()
{
	if core_variable_isUnset heroku_repository; then
		heroku_repository="$heroku_repository_default"
		heroku_validate_repository $core_commandLine_exitCode_CONFIG 'default' 'heroku_repository_default' "$heroku_repository_default"
	else
		heroku_validate_repository $core_commandLine_exitCode_CONFIG 'configuration setting' 'heroku_repository' "$heroku_repository"
	fi
}

. "$_program_libPath"/shellfire/core/init.functions "$@"
