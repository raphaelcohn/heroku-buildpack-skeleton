#!/usr/bin/env sh
# This file is part of heroku-skeleton-buildpack. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT. No part of heroku-skeleton, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku-skeleton-buildpack. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT.


_program()
{
	core_usesIn heroku
	core_usesIn heroku validate buildpack buildpack/detect
    heroku_detect()
    {
		heroku_buildpack_detect_initialise
		heroku_buildpack_detect_us

		echo HELLO
		exit 0
		
		heroku_buildpack_detect_delegateToOtherBuildpacks
		heroku_buildpack_detect_finish
    }
}

_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s\n' "$_program_fattening_program_path"
		
	elif [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi
		
	else
	
		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
		
		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}
		
		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"
				
				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"
				
				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will failure in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"
				
				_program_path_find_parentPath
				pwd -P
			)
		fi
		
	fi
}

_program_name='detect'
_program_namespace='heroku'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/../lib"
_program_etcPath="${_program_path}/../etc"
_program_varPath="${_program_path}/../var"
_program_entrypoint='heroku_detect'

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="BUILD_DIR
"
	_program_commandLine_helpMessage_description="Detects if this Heroku buildpack is appropriate for a Heroku app"
	_program_commandLine_helpMessage_options=""
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys=""
	_program_commandLine_helpMessage_examples="
  ${_program_name} BUILD_DIR
"
}

_program_commandLine_parse()
{
	heroku_validate_buildDirCommandLineParse "$@"
}

_program_hack_around_heroku()
{
	# Found using 'env' & exit 0
	# The environment contains the following special variables: USER_LOG_FILE  LOG_TOKEN  RUN_KEY  RECEIVE_DATA  STACK  BUILD_INFO  DEPLOY  LOG_FILE  GERM_PATH  REQUEST_ID  DYNO  SOURCE_VERSION
	if [ "${DYNO+set}" = 'set' ]; then
		
		# Not correctly checking out submodules
		{
			# pdksh / mksh have problems with unsetting a variable that was never set...
			if [ "${CDPATH+set}" = 'set' ]; then
				unset CDPATH
			fi
		
			cd "$_program_path"/.. 1>/dev/null
				git submodule update --init --recursive 1>/dev/null 2>/dev/null
			cd - 1>/dev/null
		}
	fi
}
_program_hack_around_heroku

. "$_program_libPath"/shellfire/core/init.functions "$@"
