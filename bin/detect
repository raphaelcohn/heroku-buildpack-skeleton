#!/usr/bin/env sh
# This file is part of heroku-skeleton-buildpack. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT. No part of heroku-skeleton, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku-skeleton-buildpack. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku-skeleton-buildpack/master/COPYRIGHT.


_program()
{
	core_usesIn heroku
	core_usesIn heroku validate buildpack
    heroku_detect()
    {
		echo "1"
		exit 0
		
		local heroku_configurationFolderPath="$heroku_buildpack_buildDir"/"$heroku_configurationFolderName"
		if ! core_path_isReadableAndSearchableFolderPath "$heroku_configurationFolderPath"; then
			echo "A"
			exit 0
			core_exitError $core_commandLine_exitCode_FAILURE "There is no heroku configuration folder '$heroku_configurationFolderName' in BUILD_DIR '$heroku_buildpack_buildDir'"
		fi
		
		local heroku_buildpacksConfigurationFolderPath="$heroku_configurationFolderPath"/"$heroku_buildpacksConfigurationFolderName"
		if ! core_path_isReadableAndSearchableFolderPath "$heroku_configurationFolderPath"; then
			echo "B"
			exit 0
			core_exitError $core_commandLine_exitCode_FAILURE "There is no heroku buildpacks configuration folder '$heroku_buildpacksConfigurationFolderName' in BUILD_DIR/$heroku_configurationFolderName '$heroku_configurationFolderPath'"
		fi
		
		# Interferes with https://elements.heroku.com/buildpacks/jessefulton/buildpack-procfile-select
		#local procfilePath="$heroku_buildpacksConfigurationFolderPath"/Procfile
		#if ! core_path_isReadableFilePath "$procfilePath"; then
		#	core_exitError $core_commandLine_exitCode_FAILURE "There is no heroku 'Procfile' in configuration folder path '$heroku_buildpacksConfigurationFolderPath'"
		#fi
		
		# We take over from https://github.com/heroku/heroku-buildpack-multi
		local buildpacksFilePath="$heroku_buildpacksConfigurationFolderPath"/.buildpacks
		if ! core_path_isReadableFilePath "$buildpacksFilePath"; then
			echo "C"
			exit 0
			core_exitError $core_commandLine_exitCode_FAILURE "There is no heroku '.buildpacks' in configuration folder path '$heroku_buildpacksConfigurationFolderPath'"
		fi
		
		printf '%s\n' "$heroku_frameworkName"
		exit $core_commandLine_exitCode_OK
    }
}

_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s' "$_program_fattening_program_path"
	elif [ "${0%/*}" = "$0" ]; then
		# We've been invoked on the PATH or directly by the interpreter (bash progname)
		# This doesn't work reliably if invoked via the PATH
		
		# We could iterate over the PATH, find the first hit, then assume it's /bin => /lib, and go from there...
		
		printf '%s' "$(pwd)"
	else
		# pdksh / mksh have problems with unsetting a variable that was never set...
		unset CDPATH 1>/dev/null 2>/dev/null || true
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			scriptPath=$(realpath "$0")
			cd "${scriptPath%/*}" 1>/dev/null
				pwd
			cd - 1>/dev/null
			unset scriptPath
			return 0
		fi
		
		originalPath="$(pwd)"
		scriptPath="$0"
		parentFolderPath=''
		linkName=''
		
		# We cd out of our directory; we may not be able to cd back into it later. Oh well.
		while [ -L "$scriptPath" ]
		do
			parentFolderPath="${scriptPath%/*}"
			linkName="${scriptPath##*/}"
			
			cd "$parentFolderPath" 1>/dev/null
			scriptPath="$(readlink "$linkName")"
		done
		
		parentFolderPath="${scriptPath%/*}"
		cd "$parentFolderPath" 1>/dev/null
		
		# Output the path
		pwd
		
		cd "$originalPath" 1>/dev/null
		
		# Unset variables; we can't use locals as ksh/yash support not yet init'd
		unset originalPath
		unset scriptPath
		unset parentFolderPath
		unset linkName
	fi
}

_program_name='detect'
_program_namespace='heroku'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/../lib"
_program_etcPath="${_program_path}/../etc"
_program_varPath="${_program_path}/../var"
_program_entrypoint='heroku_detect'

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="BUILD_DIR
"
	_program_commandLine_helpMessage_description="Detects if this Heroku buildpack is appropriate for a Heroku app"
	_program_commandLine_helpMessage_options=""
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys=""
	_program_commandLine_helpMessage_examples="
  ${_program_name} BUILD_DIR
"
}

_program_commandLine_parse()
{
	heroku_validate_buildDirCommandLineParse "$@"
	echo POS
exit 0
}

_program_hack_around_heroku_not_recursively_checking_out_submodules_for_buildpacks()
{
	# Found using 'env' & exit 0
	# The environment contains the following special variables: USER_LOG_FILE  LOG_TOKEN  RUN_KEY  RECEIVE_DATA  STACK  BUILD_INFO  DEPLOY  LOG_FILE  GERM_PATH  REQUEST_ID  DYNO  SOURCE_VERSION
	if [ "${DYNO+set}" = 'set' ]; then

		# pdksh / mksh have problems with unsetting a variable that was never set...
		unset CDPATH 1>/dev/null 2>/dev/null || true
		
		cd "$_program_path"/.. 1>/dev/null
			git submodule update --init --recursive 1>/dev/null 2>/dev/null
		cd - 1>/dev/null
		
		_program_ignoreDependencies=yes
	fi
}
_program_hack_around_heroku_not_recursively_checking_out_submodules_for_buildpacks

. "$_program_libPath"/shellfire/core/init.functions "$@"